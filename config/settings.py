import os
import sys

"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""


"""
이 모듈은 Django 프로젝트의 설정을 정의합니다.

주요 설정 항목:

- BASE_DIR: 프로젝트 루트 디렉토리 경로
- DEBUG: 디버그 모드 활성화 여부
- SECRET_KEY: Django 프로젝트의 비밀 키
- ALLOWED_HOSTS: 허용된 호스트 목록
- INSTALLED_APPS: 설치된 Django 앱 목록
- MIDDLEWARE: 미들웨어 클래스 목록
- CORS_ALLOWED_ORIGINS: 허용된 출처(origin) 목록
- LOGGING: 로깅 설정
- ROOT_URLCONF: 프로젝트의 최상위 URL 설정 파일
- TEMPLATES: 템플릿 엔진 설정
- WSGI_APPLICATION: WSGI 애플리케이션 경로
- AUTH_USER_MODEL: 사용자 모델 설정
- REST_FRAMEWORK: Django REST Framework 설정
- SIMPLE_JWT: JSON Web Token 설정
- DATABASES: 데이터베이스 설정
- GRAPHENE: GraphQL 설정
- AUTH_PASSWORD_VALIDATORS: 비밀번호 유효성 검사기 설정
- LANGUAGE_CODE: 언어 코드 설정
- TIME_ZONE: 시간대 설정
- USE_I18N: 국제화 여부 설정
- USE_TZ: 시간대 활성화 여부 설정
- STATIC_URL: 정적 파일 URL 설정
- DEFAULT_AUTO_FIELD: 기본 자동 필드 설정
- AWS 설정: AWS 관련 설정 (액세스 키, 버킷 이름, 리전 등)
- AWS Static files 설정
- AWS Media files 설정
"""


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))


import datetime
from pathlib import Path
import environ

env = environ.Env()

LOGIN_REDIRECT_URL = "/swagger/"
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(BASE_DIR / ".env")

DEBUG = env("DEBUG", default=False)

# Raises django's ImproperlyConfigured exception if SECRET_KEY not in os.environ
SECRET_KEY = env("SECRET_KEY")
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "drf_yasg",
    "graphene_django",
    "django_filters",
    "django_extensions",
    "chat",
    "notice",
    "accounts",
    "media",
    "utils",
    "alarm",
    "storages",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ALLOWED_ORIGINS = env.list("CORS_ALLOWED_ORIGINS", default=[])

CORS_ALLOW_CREDENTIALS = True


CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": (Path(__file__).resolve().parent / "debug.log").as_posix(),
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

AUTH_USER_MODEL = "accounts.CustomUser"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    )
}

SIMPLE_JWT = {
    "SIGNING_KEY": env("SECRET_KEY"),
    "ALGORITHM": "HS256",
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(minutes=15),
    "VERIFYING_KEY": None,  # 필요한 경우 검증 키 설정
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
}

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

IS_LOCAL = env("IS_LOCAL", default=False)

if IS_LOCAL:
    # 로컬 환경에서는 SQLite를 사용합니다.
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    # 운영 환경에서는 PostgreSQL을 사용합니다.
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": env("DATABASE_NAME"),
            "USER": env("DATABASE_USER"),
            "PASSWORD": env("DATABASE_PASSWORD"),
            "HOST": env("DATABASE_HOST"),
            "PORT": env("DATABASE_PORT"),
        }
    }


GRAPHENE = {"SCHEMA": "config.schema.schema"}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# AWS 설정
AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = "safe-eye-sample-video"
AWS_S3_REGION_NAME = "ap-northeast-2"
AWS_S3_CUSTOM_DOMAIN = (
    f"{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com"
)

# Media files 설정
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"

# Static files 설정
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles/"

"""
추가적인 주의사항
.env 파일 관리: 환경 변수를 사용하여 AWS 인증 정보와 같은 중요한 정보를 안전하게 관리합니다. .env 파일은 절대 공개 저장소에 업로드하지 않도록 주의해야 합니다.
CORS 설정: S3 버킷의 CORS 설정을 확인하고, 필요한 경우 웹 애플리케이션에서 S3에 호스티드된 미디어에 접근할 수 있도록 적절하게 설정합니다.
"""


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
